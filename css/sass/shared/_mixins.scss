
/***********************************************************
    Mixins
************************************************************/

/*
    Position Mixin
    - http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/

    @example:
        @include absolute(top 1em right 10%);
    @output:
        position: absolute;
        top: 1em;
        right: 10%;
*/
@mixin position($position, $args) {
    
    // List of offsets to check for in $args
    $offsets: top right bottom left;

    // We loop through $offsets to deal with them one by one
    @each $o in $offsets {

        /*
            If current offset found in $args
            assigns its index to $i
            Or `false` if not found
        */
        $i: index($args, $o);

        /*
            Now we do the verifications
            1. Is the offset listed in $args? (not false)
            2. Is the offset value within the list range?
            3. Is the offset value valid?
        */
        @if $i                                      /* 1 */
        and $i + 1 <= length($args)                 /* 2 */
        and type-of( nth($args, $i + 1) ) == number /* 3 */ {

            /*
                If everything is okay
                We assign the according value to the current offset
            */
            #{$o}: nth($args, $i + 1);
        }
    }

    position: $position;
}

@mixin absolute($args) {
    @include position(absolute, $args);
}

@mixin fixed($args) {
    @include position(fixed, $args);
}

@mixin relative($args) {
    @include position(relative, $args);
}

/* 
    Hex to Rgba

    @exmple: 
        @include hex-to-rgba(#333, 0.5);
    @output:
        color: #333; // The Fallback
        color: rgba(200, 54, 54, 0.5);
*/
@mixin hex-to-rgba($color, $opacity: 1) {
    background: $color; /* The Fallback */
    background: rgba($color, $opacity);
}


/* 
    Sizing Mixin

    @exmple: 
        @include size(100%, 10px);
    @output:
        width: 100%;
        height: 10px;
*/
@mixin size($width, $height: $width) {
      width: $width;
      height: $height;
}


/*
    Calculate px to rem (font-size)
    
    @example:
        @include font-size(14px);
    @output:
        font-size: 14px;
        font-size: 1.4rem; // ie will ignore this line he not understand it at all
*/
@mixin font-size($size, $is-important: false) {
    $size: if(unitless($size), $size, $size / 1px);

    @if $is-important {
      font-size: $size + px !important;
      font-size: ($size / 10) + rem !important;
    } @else {
      font-size: $size + px;
      font-size: ($size / 10) + rem;
    }
}

/*
    Arrows Mixin

    $direction: top, left, right, bottom, top-left, top-right, bottom-left, bottom-right
    $color: hex, rgb or rbga
    $size: px or em

    @example:
        @include arrow(top, #000, 50px);
    @output:
        display: inline-block;
        height: 0;
        width: 0;
        border-left: 50px solid transparent;
        border-right: 50px solid transparent;
        border-bottom: 50px solid #000000;
*/
@mixin arrow($direction, $color, $size){
    display: inline-block;
    height: 0;
    width: 0;

    @if $direction == 'top' {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    } @else if $direction == 'right' {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    } @else if $direction == 'bottom' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
        border-left: $size solid transparent;
    } @else if $direction == 'left' {
        border-top: $size solid transparent;
        border-right: $size solid $color;
        border-bottom: $size solid transparent;
    } @else if $direction == 'top-left' {
        border-top: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'top-right' {
        border-top: $size solid $color;
        border-left: $size solid transparent;
    } @else if $direction == 'bottom-left' {
        border-bottom: $size solid $color;
        border-right: $size solid transparent;
    } @else if $direction == 'bottom-right' {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
    }
}


/*
    Hidpi Mixin
    - Hidpi Mixin help you to specify styles or load hi res image 
      for hidpi resolutions such as retina or android amoled

    @example:
        @include hidpi {
            background-image('../img/some-image@2x.png') top left no-repeat;
        };
*/
@mixin hidpi($media: all) {
  @media
    only #{$media} and (min--moz-device-pixel-ratio: 1.5),
    only #{$media} and (-o-min-device-pixel-ratio: 3/2),
    only #{$media} and (-webkit-min-device-pixel-ratio: 1.5),
    only #{$media} and (min-device-pixel-ratio: 1.5),
    only #{$media} and (min-resolution: 144dpi),
    only #{$media} and (min-resolution: 1.5dppx) {

    @content;
  }
}


/*
    Reset Unordered List

    @example:
        @include reset-ul-list;
    @output:
        list-style: none;
        margin: 0;
        padding: 0;
*/
@mixin reset-ul-list {
    list-style: none;
    margin: 0;
    padding: 0;
}


/*
    Hide Text
    
    @example:
        @include hide-text;
    @output:
        text-indent: 110%;
        overflow: hidden;
        white-space: nowrap;
*/
@mixin hide-text {
    text-indent: 110%;
    overflow: hidden;
    white-space: nowrap;
}


/*
    Opacity
    - Cross browser opacity ie7 +, FF, Opera, Chrome etc...

    @example:
        @include opacity(0.5);
    @output:
        opacity: 50%;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50%)";
        filter: alpha(opacity=50%); //IE8
*/
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=$opacity-ie)";
    filter: alpha(opacity=$opacity-ie); //IE8
}


/*
    Placeholder
    - change text color or add italic to font only for placeholder
    
    @example:
        @include input-placeholder{
            font-style: italic;
            color: #000000;
        };
*/
@mixin input-placeholder {
    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }
}


/*
    Center-align a block level element
    - Lot of time you need to center some element in the middle 
      this is a mixin who give you short code

    @example:
        @include center-block;
    @output:
        display: block;
        margin-left: auto;
        margin-right: auto;
*/
@mixin center-block() {
    display: block;
    margin-left: auto;
    margin-right: auto;
}


/*
    IE7 inline-block
    - Ie7 not suport inline-block and you need to add this hack if you support ie7

    @example:
        @include ie7-inline-block;
    @output:
        *display: inline; // IE7 inline-block hack
        *zoom: 1;
*/
@mixin ie7-inline-block() {
    *display: inline; // IE7 inline-block hack
    *zoom: 1;
}


/*
    Webkit-style focus
*/
@mixin tab-focus() {
    // Default
    outline: thin dotted #333;
    // Webkit
    outline: 5px auto -webkit-focus-ring-color;
    outline-offset: -2px;
}


/*
    Clearfix
*/
@mixin clearfix {
    *zoom: 1;

    &:before,
    &:after {
        display: table;
        content: "";
    }

    &:after {
        clear: both;
    }
}


/*
    IE7 likes to collapse whitespace on either side of the inline-block elements.
    Ems because we're attempting to match the width of a space character. Left
    version is for form buttons, which typically come after other elements, and
    right version is for icons, which come before. Applying both is ok, but it will
    mean that space between those elements will be .6em (~2 space characters) in IE7,
    instead of the 1 space in other browsers.
*/
@mixin ie7-restore-left-whitespace() {
    *margin-left: .3em;

    &:first-child {
        *margin-left: 0;
    }
}

@mixin ie7-restore-right-whitespace() {
    *margin-right: .3em;

    &:last-child {
        *margin-left: 0;
    }
}
